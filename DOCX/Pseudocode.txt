```js
/*
ceci est le pseudocode d'un jeux de "bataille navale" a sens unique
(un ataquant, un défenseur[BOT])

structure de board pour 5x5 (contenant un bateau vertical, de deux de long)
  x -> 
[[0,0,0      ,0,0],
 [0,0,0      ,0,0],	y
 [0,0,["A",1],0,0],	|
 [0,0,["A",1],0,0],	v
 [0,0,0      ,0,0]]

le point 0,0 est en haut a gauche

syboles:

-bateaux: seront représenté par des lettres "A" unique a chaque bateau

orientations: 0=horizontal | 1=vertical

-l'au: 0
*/

// 0 // les variables

let board; //la matrice du jeux (10x10)
const boatsIDs; //qui contien les letres et longeurs des bateaux

une page HTML et CSS qui permet l'affichage des information de jeux et leurs récupération (grid en css? , des boutons et champs d'entrées)

//// 1 //// crée le champs de bataille

function start(){
    //crée la variable board (un tableau de 0's 10x10)
    //
    //createShips();
    //
    //
}

function update(){
    //récupère les valeurs entrées x et y 
    //shoot(x,y) avec les coordonée introduites
    //en fonction du return de shoot displayIcon(x,y,file) du bon fichier
    //killFinder() si true: end()
}

function displayIcon(x,y,file){
    //affiche l'image donnée au coordonée du tableau
    // sur la page HTML
}

function end(){
    //affiche tous les bateaux
}

function getSelection(){
    //@return les coordonée x et y dans une liste [x,y]
    // depuis la page HTML
}

function createShips(){
    //ajoute des bateaux au board
    // - porte avion        (5 cases) "A"
    // - croiseur           (4 cases) "B"
    // - contre torpilleur  (3 cases) "C"
    // - sous-marin         (3 cases) "D"
    // - torpilleur         (2 cases) "E"
    //
    // utilise random(0,9) pour avoir les coordonée
    // utilise random(0,1) pour l'orientation
    // vérifie si elle sont valide avec isShip(x,y)
    // générer de nouvelle coordonée si elle sont pas dispo
    // placer des liste [letre,oriantation] aux coordonée de la grille
    // !sur chaque case de la longueur du bateau!
}

//// 2 //// logique du jeu

function shoot(x, y){
    //vérifie ci il y a un bateau
    // les bateaux:    board[y][x].isArray() == true
    // si true:  board[y][x][1] += 10;
    //@return true si touché, false si-non
}

function killFinder(){
    //parcoure le tableau compte pour chaque letres,
    //les cases dont board[y][x][1] < 10 
    // si l'un des compteur reste a 0, le bateau en question a coulé
    //@return true si tous les bateaux sont coulés (false si-non)
}

function isShip(x,y){
    //vérifie si il y a un bateau aux coordonée donée ou adjasant (les 4 case autour)
    //! les case qui ne sont pas dans la grille sont a ignorer!
    @return true si il y a un bateau, false si-non
}

//// 3 //// autres

function random(m,n){
    //génaire un nombre aléatoire entre m et n INCLUS
    //@return le nombre généré
}
```